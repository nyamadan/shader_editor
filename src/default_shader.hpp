namespace shader_editor {
const char* const DefaultFragmentShaderSource =
    "#ifdef GL_ES\n"
    "precision mediump float;\n"
    "#endif\n"
    "\n"
    "uniform float time;\n"
    "uniform vec2 mouse;\n"
    "uniform vec2 resolution;\n"
    "\n"
    "// original: https://github.com/mrdoob/glsl-sandbox\n"
    "void main(void) {\n"
    "    vec2 position = (gl_FragCoord.xy / resolution.xy) + mouse / 4.0;\n"
    "\n"
    "    float color = 0.0;\n"
    "    color += sin(position.x * cos(time / 15.0) * 80.0) +\n"
    "             cos(position.y * cos(time / 15.0) * 10.0);\n"
    "    color += sin(position.y * sin(time / 10.0) * 40.0) +\n"
    "             cos(position.x * sin(time / 25.0) * 40.0);\n"
    "    color += sin(position.x * sin(time / 5.0) * 10.0) +\n"
    "             sin(position.y * sin(time / 35.0) * 80.0);\n"
    "    color *= sin(time / 10.0) * 0.5;\n"
    "\n"
    "    gl_FragColor =\n"
    "        vec4(vec3(color, color * 0.5, sin(color + time / 3.0) * 0.75), \n"
    "1.0);\n"
    "}";

const char* const DefaultVertexShaderSource =
    "#if GL_ES\n"
    "#define half2 mediump vec2\n"
    "#else\n"
    "#define half2 vec2\n"
    "#endif\n"
    "\n"
    "attribute vec3 aPosition;\n"
    "varying vec2 surfacePosition;\n"
    "\n"
    "uniform half2 resolution;\n"
    "\n"
    "void main(void) {\n"
    "    surfacePosition =\n"
    "        0.5 * aPosition.xy * vec2((resolution.x / resolution.y), 1.0);\n"
    "    gl_Position = vec4(aPosition, 1.0);\n"
    "}\n";

const char* const DefaultCopyShaderSource =
    "#ifdef GL_ES\n"
    "precision mediump float;\n"
    "#endif\n"
    "\n"
    "uniform sampler2D backbuffer;\n"
    "uniform vec2 resolution;\n"
    "\n"
    "void main(void) {\n"
    "    vec2 uv = gl_FragCoord.xy / resolution;\n"
    "    vec3 color = texture2D(backbuffer, uv).rgb;\n"
    "    gl_FragColor = vec4(color, 1.0);\n"
    "}\n";

const char* const DefaultPreShaderToySource =
    "#version 300 es\n"
    "\n"
    "#ifdef GL_ES\n"
    "precision highp float;\n"
    "precision highp int;\n"
    "precision mediump sampler3D;\n"
    "#endif\n"
    "\n"
    "uniform float iTime;\n"
    "uniform int iFrame;\n"
    "uniform vec4 iMouse;\n"
    "uniform vec2 iResolution;\n"
    "\n"
    "uniform sampler2D iChannel0;\n"
    "uniform sampler2D iChannel1;\n"
    "uniform sampler2D iChannel2;\n"
    "uniform sampler2D iChannel3;\n"
    "\n"
    "out vec4 outColor;\n"
    "\n"
    "void mainImage(out vec4 fragColor, in vec2 fragCoord);\n"
    "\n"
    "void main(void) {\n"
    "    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n"
    "    mainImage(color, gl_FragCoord.xy);\n"
    "    color.a = 1.0;\n"
    "    outColor = color;\n"
    "}\n";

}  // namespace shader_editor